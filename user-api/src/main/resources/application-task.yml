spring:
# Spring Task 调度任务的配置，对应 TaskSchedulingProperties 配置类
  task:
    scheduling:
      thread-name-prefix: zhoudy-demo- # 线程池的线程名的前缀。默认为 scheduling- ，建议根据自己应用来设置
      pool:
        size: 10 # 线程池大小。默认为 1 ，根据自己应用来设置

# Quartz的配置，对应QuartzProperties配置类
#基于内存
#  quartz:
#    job-store-type: memory # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库
#    auto-startup: true #quartz是否自动启动
#    startup-delay: 0 #延迟N秒启动
#    wait-for-jobs-to-complete-on-shutdown: true #应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
#    overwrite-existing-jobs: false #是否覆盖已有JOB的配置
#    properties:
#      org:
#        quartz:
#          threadPool:
#            threadCount: 25 # 线程池大小。默认为 10 。
#            threadPriority: 5 # 线程优先级
#            class: org.quartz.simpl.SimpleThreadPool # 线程池类型

#基于数据库
  quartz:
    scheduler-name: clusteredScheduler  # Scheduler 名字。默认为 schedulerName
    job-store-type: jdbc # Job 存储器类型。默认为 memory 表示内存，可选 jdbc 使用数据库
    auto-startup: true #quartz是否自动启动
    startup-delay: 0 #延迟N秒启动
    wait-for-jobs-to-complete-on-shutdown: true #应用关闭时，是否等待定时任务执行完成。默认为 false ，建议设置为 true
    overwrite-existing-jobs: false #是否覆盖已有JOB的配置
    properties:
      org:
        quartz:
          # JobStore 相关配置
          jobStore:
            dataSource: quartzDataSource #使用数据源
            class: org.quartz.impl.jdbcjobstore.JobStoreTX # JobStore 实现类
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_ # Quartz 表前缀
            isClustered: true # 是集群模式
            clusterCheckinInterval: 1000
            useProperties: false
          #线程池相关配置
          threadPool:
            threadCount: 25 # 线程池大小。默认为 10 。
            threadPriority: 5 # 线程优先级
            class: org.quartz.simpl.SimpleThreadPool # 线程池类型
      jdbc: # 使用 JDBC 的 JobStore 的时候，JDBC 的配置
        initialize-schema: never # 是否自动使用 SQL 初始化 Quartz 表结构。这里设置成 never ，我们手动创建表结构。






